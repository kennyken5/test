
 # ゼロワンロジック

 ## 第１章 コンピュータの誕生とＣＰＵの歴史

 ### 1.1　コンピュータの起源

 パスカルの機械式計算機は歯車を用いる。デジタル
 計算尺は数を尺の長さに置き換える。相似型計算機（アナログ型、連続型、計測型）

 ### 1.2　電気を使った計算機

 リレー式。コイルでスイッチのオンオフを切り替える。
Zuse Z3 コンラッド・ツーゼ

 ### 1.3　電子計算機の登場

当時のテレビが真空管30本のところ、
エニアックは1.75万本使用。

ハーバードマークワンがひとつの乗算に４秒要するところ、エニアックは2.8ミリ秒。
エニアックは非プログラム内蔵式、10進数採用など無駄があったが1955年まで稼働。

そしてノイマン式へ。　第一世代

第二世代はトランジスタ、第三世代はＩＣ集積回路、第三.五世代がLSI（ラージスケールIC）。

第四世代はVLSIやマイクロプロセッサ。4~16ビット
インテル4004はトランジスタ2300個の4ビットのマイクロプロセッサ、10桁以上の計算を行う工夫。

80’s~90'sの第五は16~32ビット、90's～00'sの第六は32~64ビット。

 ## 第２章 CPUの基本構造

 ### 2.1　コンピュータと２進数

 ０Vか３Vか、デジタルの方が電圧変動によるエラーに強い。
ブール代数が使われる。
論理積AND　００のとき０、それ以外は１。
論理和OR　１１のとき１、それ以外は０。
論理否定NOT　０なら１。１なら０。

現在、１バイトは８ビットである
（ワードは一度にCPUが扱う単位。レジスタ長。ただ、32ビットCPUでも１ワード＝１６ビットが多い）
（RISC系CPUは１ワード32ビットが多い）

ニブルnible、１バイトを４ビットとするものも。
BCDバイナリコーデッドデシマル二進化十進符号につかう。
16ビットで2人数なら0~65535だが、
BCDは16ビットで0~9999である。

 ### 2.2　コンピュータの基本構造

制御装置、演算装置、記憶装置、入力装置、出力装置

x86系の源流　8ビットＣＰＵ「8080」　そのレジスタの詳細。
8080は８ビットCPUだが、扱えるメモリサイズが65536バイト（64Kバイト）なので
番地の指定には16ビットが必要。そのため、HレジスタとＬレジスタを一組にしてレジスタペアＨにつかう。
この仕組みは後継x86系にも受け継がれ、16ビットCPUには32ビットレジスタ、32には64を（64では128か？）
プログラムカウンタは、次に実行すべき命令のある番地が格納。16ビットである。


x86系の祖　16ビットCPU「8086」　そのレジスタの詳細
プログラムカウンタはインストラクションポインタ（命令ポインタ）と名前が変わっている。
8086では64Kバイトよりも大きい１Ｍバイト（8086の場合）のメモリ空間をつかう。
「セグメント」なる概念。セグメントレジスタ（ＣＳ）の値にインストラクションポインタの値を４ビットずらして加算して割り出す。

015A　　CS
_530B　IP
068AB　次に実行する命令のある番地

この結果、IPの値が直接番地を示すものではなくなった。
相対的な値（オフセットアドレス）を示すので、「ポインタ」と称する。

 ### 2.3　コンピュータの動作

 ノイマン型comp.Ｃの動作
 x86系CPUにおけるCOMP.の動作
 アセンブリ言語


 ## 第３章 数の表現

 浮動小数点

3.1　二進数など
3.2　固定小数点と負数
3.3　浮動小数点の表現
3.4　BCD表現　
10進数の各桁を4ビットの2進数ニブルにしｔらもの、
123456789の、0000～1001のみつかう
複数桁はパックドBCDかアンパックドBCDか。

アンパックドBCD　ascii、EBCDICとも、数字の文字コードとアンパックドBCDで示した数は同じ。

0のASCII　アンパ 0000 0000 、asciiは 0011 0000 、EBCIDは 1111 0000
5のASCII　アンパ 0000 0101 、asciiは 0011 0101 、EBCIDは 1111 0101
9のASCII　アンパ 0000 1001 、asciiは 0011 1001 、EBCIDは 1111 1001

バックドの場合、符号ビットはベンダーによるので注意
（末尾の4ビッドが、正数の場合1100（十二）、負数は1101（十三））


 ## 第４章 文字の表現


 ## 第５章 四則演算を実現

実用論理演算　基本論理演算でないもの
NAND(NotAND)…　論理積ANDの結果に論理否定NOTを行ったもの。演算記号(・に－を付加)
１１…0
１０…0
０１…0
００…１

リレー回路で論理演算を見る

論理積AND…　２つのリレーを直列（なので、両方ともＯＮでしか電流する）
論理和ＯＲ…　２つのリレーを並列（なので、少なくとも片方がＯＮだと電流する。OFFとＯＦＦに限り無電流）
否定NOT…　コイルとスイッチの組み合わせ。

論理素子ロジックゲート

NAND素子,NOR素子は一種類だけの組み合わせで基本論理演算をつくれる。


 ## 第６章 メモリとアドレス

  ## 第７章 プログラムの制御
  